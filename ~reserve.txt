

		template <typename T>
		typename std::enable_if<!std::is_same<T, std::vector<typename T::value_type>>::value, void>::type
			PrintPath(const T& element) {
			std::cout << " " << element << " ";
		};

		template <typename T>
		typename std::enable_if<std::is_same<T, std::vector<typename T::value_type>>::value, void>::type
			PrintPath(const T& vector) {
			std::cout << "{ ";
			for (const auto& element : vector) {
				PrintPath(element);
			}
			std::cout << " }";
		};
//
		auto PopulateCallGraph =
			[
				&
			]
		( ) -> void
		{
			__stdtracein__("PopulateCallGraph");
			const BigInt128_t& LHSPrimaryKeyUInt64 = Theorem_UInt64Vec[LHS];
			const BigInt128_t& RHSPrimaryKeyUInt64 = Theorem_UInt64Vec[RHS];
			for (std::vector<BigInt128_t>& Axiom_i : Axioms_UInt64Vec)
			{
				const BigInt128_t& LHSAxiom_iPrimaryKeyUInt64 = Axiom_i[LHS];
				const BigInt128_t& RHSAxiom_iPrimaryKeyUInt64 = Axiom_i[RHS];

				const bool SubnetFound = (
					( LHSPrimaryKeyUInt64 % LHSAxiom_iPrimaryKeyUInt64 == 0 ) ||
					( LHSPrimaryKeyUInt64 % RHSAxiom_iPrimaryKeyUInt64 == 0 ) );

				if (SubnetFound)
				{
					CallGraphUInt64Map[Theorem_UInt64Vec[guid_UInt64]][Axiom_i[guid_UInt64]] = true;
					//CallGraphUInt64Map[Axiom_i[guid_UInt64]][Theorem_UInt64Vec[guid_UInt64]] = true;
					//std::cout << "CallGraphUInt64Map[" << Theorem_UInt64Vec[guid_UInt64] << "][" << Axiom_i[guid_UInt64] << "] = " << CallGraphUInt64Map[Theorem_UInt64Vec[guid_UInt64]][Axiom_i[guid_UInt64]] << std::endl;
					//std::cout << "CallGraphUInt64Map[" << Axiom_i[guid_UInt64] << "][" << Theorem_UInt64Vec[guid_UInt64] << "] = " << CallGraphUInt64Map[Axiom_i[guid_UInt64]][Theorem_UInt64Vec[guid_UInt64]] << std::endl;
				}
					//CallGraphUInt64Map.emplace(Theorem_UInt64Vec[guid_UInt64], std::unordered_map<BigInt128_t, bool>{{Axiom_i[guid_UInt64], true}});

				for (std::vector<BigInt128_t>& Axiom_j : Axioms_UInt64Vec)
				{
					const BigInt128_t& LHSAxiom_jPrimaryKeyUInt64 = Axiom_j[LHS];
					const BigInt128_t& RHSAxiom_jPrimaryKeyUInt64 = Axiom_j[RHS];

					const bool SubnetFound = (
						( LHSAxiom_iPrimaryKeyUInt64 % LHSAxiom_jPrimaryKeyUInt64 == 0 ) ||
						( LHSAxiom_iPrimaryKeyUInt64 % RHSAxiom_jPrimaryKeyUInt64 == 0 ));

					if (/*Axiom_i[guid_UInt64]!= Axiom_j[guid_UInt64] && */SubnetFound)
					{
						CallGraphUInt64Map[Axiom_i[guid_UInt64]][Axiom_j[guid_UInt64]] = true;
						//CallGraphUInt64Map[Axiom_j[guid_UInt64]][Axiom_i[guid_UInt64]] = true;
						//std::cout << "CallGraphUInt64Map[" << Axiom_i[guid_UInt64] << "][" << Axiom_j[guid_UInt64] << "] = " << CallGraphUInt64Map[Axiom_i[guid_UInt64]][Axiom_j[guid_UInt64]] << std::endl;
						//std::cout << "CallGraphUInt64Map[" << Axiom_j[guid_UInt64] << "][" << Axiom_i[guid_UInt64] << "] = " << CallGraphUInt64Map[Axiom_j[guid_UInt64]][Axiom_i[guid_UInt64]] << std::endl;
					}
						//CallGraphUInt64Map.emplace(Axiom_i[guid_UInt64],std::unordered_map<BigInt128_t, bool>{{Axiom_j[guid_UInt64], true}});
				}
			}
			__stdtraceout__("PopulateCallGraph");
		};

		PopulateCallGraph();
//
					if (LocalSubnetFoundFlag)
					{
						for (const std::string ax_tok : Axiom_Dest) {
							Theorem_Dest.emplace_back(ax_tok);
							__stdlog__({ ax_tok + " " }, false);
						}
						SubnetFoundFlag = true;
						__stdlog__({ "" });
					}
//
        __stdlog__({"Theorem_Src = {"}, false);
        for (const std::string& z : Theorem_Src)
        {
            __stdlog__({ "\"",z,"\","}, false);
        }
        __stdlog__({"}"});
        
        __stdlog__({"Axiom_Src = {"}, false);
        for (const std::string& z : Axiom_Src)
        {
            __stdlog__({ "\"",z,"\","}, false);
        }
        __stdlog__({"}"});
		
		__stdlog__({ "ax_size:", std::to_string(ax_size), ", th_size:", std::to_string(th_size) });
//
            __stdlog__({"{"}, false);
            for (const std::vector<std::string>& y : Theorem_0002)
            {
                __stdlog__({"{"}, false);
                for (const std::string& z : y)
                {
                    __stdlog__({ "\"",z,"\","}, false);
                }
                __stdlog__({"}"}, false);
            }
            __stdlog__({"}"});
//
        __stdlog__({"{"}, false);
        for (const std::vector<std::string>& y : Theorem)
        {
            __stdlog__({"{"}, false);
            for (const std::string& z : y)
            {
                __stdlog__({ "\"",z,"\","}, false);
            }
            __stdlog__({"}"}, false);
        }
        __stdlog__({"}"});
//
        __stdlog__({"{"}, false);
        for (const std::vector<std::string>& y : Axiom)
        {
            __stdlog__({"{"}, false);
            for (const std::string& z : y)
            {
                __stdlog__({ "\"",z,"\","}, false);
            }
            __stdlog__({"}"}, false);
        }
        __stdlog__({"}"});
//
        for(const std::vector<std::vector<std::string>>& x : TempProofStep3DStdStrVec)
        {
            __stdlog__({"{"}, false);
            for (const std::vector<std::string>& y : x)
            {
                __stdlog__({"{"}, false);
                for (const std::string& z : y)
                {
                    __stdlog__({ "\"",z,"\"," }, false);
                }
                __stdlog__({"}"}, false);
            }
            __stdlog__({"}"});
        }
//
        for(const std::vector<std::vector<std::string>>& x : OutProofStep3DStdStrVec)
        {
            __stdlog__({"{"}, false);
            for (const std::vector<std::string>& y : x)
            {
                __stdlog__({"{"}, false);
                for (const std::string& z : y)
                {
                    __stdlog__({ "\"",z,"\","}, false);
                }
                __stdlog__({"}"}, false);
            }
            __stdlog__({"}"});
        }
//
        for(const std::vector<std::vector<std::string>>& x : OutProofStep3DStdStrVec)
        {
            __stdlog__({"{"}, false);
            for (const std::vector<std::string>& y : x)
            {
                __stdlog__({"{"}, false);
                for (const std::string& z : y)
                {
                    __stdlog__({ "\"",z,"\","}, false);
                }
                __stdlog__({"}"}, false);
            }
            __stdlog__({"}"});
        }
//
        std::priority_queue<PROOF_STEP> Tasks_Thread;

        Tasks_Thread.push(OutProofStep3DStdStrVec);

        /*
        // internal representation //
        std::priority_queue<
        std::vector<
        std::vector<std::string>>> Tasks_Thread;

        Tasks_Thread.push(
            {
                // {{opcode},{lhs},{rhs}} //
                {{"root","Theorem_","0"},{"1","+","1","+","1","+","1"},{"4"}}
            });
        */

        // *** Core Proof Engine (Loop) *** //
        while (!Tasks_Thread.empty() && !QED)
        {
            PROOF_STEP TempProofStep3DStdStrVec{ Tasks_Thread.top() };

            Tasks_Thread.pop();

            const
                std::vector<
                std::vector<
                std::string>>&Theorem{ TempProofStep3DStdStrVec.back() };

            if (Theorem[LHS] == Theorem[RHS])
            {
                __stdlog__({ "Tentative Proof found" });
                QED = true;
            } else {
                // Add new rewrites to the task queue //
                const std::size_t& I = InProofLibrary3DStdStrVec.size();
                for (std::size_t i = 1; i < I; ++i)
                {
                    std::vector<
                    std::vector<
                    std::string>>

                    Theorem_0000 = Theorem,
                    Theorem_0001 = Theorem,
                    Theorem_0002 = Theorem,
                    Theorem_0003 = Theorem,
                    Theorem_0004 = Theorem;

                    Theorem_0000[LHS].clear();
                    Theorem_0001[LHS].clear();

                    Theorem_0002[RHS].clear();
                    Theorem_0003[RHS].clear();

                    bool lhs_reduce_flag{};
                    bool lhs_expand_flag{};
                    bool rhs_reduce_flag{};
                    bool rhs_expand_flag{};

                    const
                    std::vector<
                    std::vector<std::string>>&

                    Axiom = InProofLibrary3DStdStrVec[i];

                    for (const std::string ax_tok : Axiom[RHS]) {
                        std::cout << ax_tok + " ";
                    }
                    std::cout << std::endl;
                    
                    const std::string ax_tok{};
                    std::cin >> ax_tok;
                    
                    // basic rewrites //

                    // lhs_reduction //
                    __stdlog__({ "lhs_reduce:" });
                    if (lhs_reduce_flag = SubnetFound(Theorem[LHS], Axiom[LHS], Axiom[RHS], Theorem_0000[LHS]))
                    {
                        Theorem_0000[opcode_field][opcode] = OpcodeStruct.lhs_reduce;
                        Theorem_0000[opcode_field][axiom_label] = axiom_name;
                        Theorem_0000[opcode_field][guid_UInt64] = std::to_string(i);

                        PROOF_STEP ProofStep = TempProofStep3DStdStrVec;

                        ProofStep.emplace_back(Theorem_0000);

                        Tasks_Thread.push(ProofStep);
                    }

                    // lhs_expansion //
                    __stdlog__({ "lhs_expand:" });
                    if (lhs_expand_flag = SubnetFound(Theorem[LHS], Axiom[RHS], Axiom[LHS], Theorem_0001[LHS]))
                    {
                        Theorem_0001[opcode_field][opcode] = OpcodeStruct.lhs_expand;
                        Theorem_0001[opcode_field][axiom_label] = axiom_name;
                        Theorem_0001[opcode_field][guid_UInt64] = std::to_string(i);

                        PROOF_STEP ProofStep = TempProofStep3DStdStrVec;

                        ProofStep.emplace_back(Theorem_0001);

                        Tasks_Thread.push(ProofStep);
                    }

                    // rhs_reduction //
                    __stdlog__({ "rhs_reduce:" });
                    if (rhs_expand_flag = SubnetFound(Theorem[RHS], Axiom[LHS], Axiom[RHS], Theorem_0002[RHS]))
                    {
                        Theorem_0002[opcode_field][opcode] = OpcodeStruct.rhs_reduce;
                        Theorem_0002[opcode_field][axiom_label] = axiom_name;
                        Theorem_0002[opcode_field][guid_UInt64] = std::to_string(i);

                        PROOF_STEP ProofStep = TempProofStep3DStdStrVec;

                        ProofStep.emplace_back(Theorem_0002);

                        Tasks_Thread.push(ProofStep);
                    }

                    // rhs_expansion //
                    __stdlog__({ "rhs_expand:" });
                    if (rhs_reduce_flag = SubnetFound(Theorem[RHS], Axiom[RHS], Axiom[LHS], Theorem_0003[RHS]))
                    {
                        Theorem_0003[opcode_field][opcode] = OpcodeStruct.rhs_expand;
                        Theorem_0003[opcode_field][axiom_label] = axiom_name;
                        Theorem_0003[opcode_field][guid_UInt64] = std::to_string(i);

                        PROOF_STEP ProofStep = TempProofStep3DStdStrVec;

                        ProofStep.emplace_back(Theorem_0003);

                        Tasks_Thread.push(ProofStep);
                    }

                    // advanced rewrites //

                    __stdlog__({ "lhs_reduce + rhs_reduce:" });
                    if (lhs_reduce_flag && rhs_reduce_flag) {
                        Theorem_0004[opcode_field][opcode] = OpcodeStruct.lhs_expand + " + " + OpcodeStruct.rhs_expand + " via ";
                        Theorem_0004[opcode_field][axiom_label] = axiom_name;
                        Theorem_0004[opcode_field][guid_UInt64] = std::to_string(i);
                        Theorem_0004[LHS] = Theorem_0000[LHS];
                        Theorem_0004[RHS] = Theorem_0003[RHS];

                        PROOF_STEP ProofStep = TempProofStep3DStdStrVec;

                        ProofStep.emplace_back(Theorem_0004);

                        Tasks_Thread.push(ProofStep);
                    }

                    __stdlog__({ "lhs_reduce + rhs_expand:" });
                    if (lhs_reduce_flag && rhs_expand_flag) {
                        Theorem_0004[opcode_field][opcode] = OpcodeStruct.lhs_expand + " + " + OpcodeStruct.rhs_expand + " via ";
                        Theorem_0004[opcode_field][axiom_label] = axiom_name;
                        Theorem_0004[opcode_field][guid_UInt64] = std::to_string(i);
                        Theorem_0004[LHS] = Theorem_0000[LHS];
                        Theorem_0004[RHS] = Theorem_0002[RHS];

                        PROOF_STEP ProofStep = TempProofStep3DStdStrVec;

                        ProofStep.emplace_back(Theorem_0004);

                        Tasks_Thread.push(ProofStep);
                    }

                    __stdlog__({ "lhs_expand + rhs_reduce:" });
                    if (lhs_expand_flag && rhs_reduce_flag) {
                        Theorem_0004[opcode_field][opcode] = OpcodeStruct.lhs_expand + " + " + OpcodeStruct.rhs_expand + " via ";
                        Theorem_0004[opcode_field][axiom_label] = axiom_name;
                        Theorem_0004[opcode_field][guid_UInt64] = std::to_string(i);
                        Theorem_0004[LHS] = Theorem_0001[LHS];
                        Theorem_0004[RHS] = Theorem_0003[RHS];

                        PROOF_STEP ProofStep = TempProofStep3DStdStrVec;

                        ProofStep.emplace_back(Theorem_0004);

                        Tasks_Thread.push(ProofStep);
                    }

                    __stdlog__({ "lhs_expand + rhs_expand:" });
                    if (lhs_expand_flag && rhs_expand_flag) {
                        Theorem_0004[opcode_field][opcode] = OpcodeStruct.lhs_expand + " + " + OpcodeStruct.rhs_expand + " via ";
                        Theorem_0004[opcode_field][axiom_label] = axiom_name;
                        Theorem_0004[opcode_field][guid_UInt64] = std::to_string(i);
                        Theorem_0004[LHS] = Theorem_0001[LHS];
                        Theorem_0004[RHS] = Theorem_0002[RHS];

                        PROOF_STEP ProofStep = TempProofStep3DStdStrVec;

                        ProofStep.emplace_back(Theorem_0004);

                        Tasks_Thread.push(ProofStep);
                    }
                } // end for (...Axiom : InAxiomsStdStrVec)
            } // end test (...Theorem[LHS] == Theorem[RHS])
            __stdlog__({ "Next Round..." });
        } // end for (...!Tasks_Thread.empty() && !QED))
